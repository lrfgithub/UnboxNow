logging.level.root=warn

spring.jpa.open-in-view=false

spring.devtools.livereload.enabled=false

# Redis as cache
spring.cache.type=redis
spring.cache.redis.time-to-live=900000

# Kafka as message queue
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=UnboxNow.inventory.common.message
spring.kafka.consumer.properties.spring.json.use.type.mapper.for.key=true
spring.kafka.listener.concurrency=1

# -------------------------------

# env for testing
#server.port=8083
#spring.data.redis.url=redis://localhost:8667
#spring.kafka.producer.bootstrap-servers=localhost:9094
#spring.kafka.consumer.bootstrap-servers=localhost:9094

# env for running locally
#server.port=8083
#spring.data.redis.url=redis://localhost:8667
#spring.kafka.producer.bootstrap-servers=localhost:9094
#spring.kafka.consumer.bootstrap-servers=localhost:9094
#spring.datasource.url=jdbc:mysql://localhost:8663/unbox-now
#spring.datasource.username=inventory
#spring.datasource.password=unboxnow03

# env for running in docker
spring.data.redis.url=redis://redis:6379
spring.kafka.producer.bootstrap-servers=kafka:9092
spring.kafka.consumer.bootstrap-servers=kafka:9092
spring.datasource.url=jdbc:mysql://mysql-03-inventory/unbox-now
spring.datasource.username=inventory
spring.datasource.password=unboxnow03
